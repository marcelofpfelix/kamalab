#!KAMAILIO

auto_aliases=no
listen=10.0.0.1
// max number of loops
max_while_loops=2048

#latency_cfg_log=0
latency_cfg_log=0
latency_limit_action=50000 # us
latency_limit_db=200
#latency_log=0 # log level

loadmodule "xlog"
loadmodule "pv"
loadmodule "sl"
#loadmodule "ctl"
loadmodule "htable"

modparam("htable", "htable", "cps=>size=3;initval=0;autoexpire=60")

loadmodule "http_client.so"
#modparam("http_client", "httpcon", "fqdn=>http://wizard-world-api.herokuapp.com")
modparam("http_client", "httpcon", "fqdn=>https://fakerapi.it")
 #http://privateapi.query.dc2b-prod.consul:8082;timeout=12")



# http://privateapi.query.dc2b-prod.consul:8082/connections/fqdn-authentication?microsoft_teams_sbc=true
# curl https://fakerapi.it/api/v1/companies\?_quantity\=1000 
loadmodule "jansson.so"

request_route {
  // $sht(cps=>test) is the logical link to the Htable called cps with a key named $si
  // we are increasing the source IP's counter by 1
  $sht(cps=>$si) = $sht(cps=>$si) + 1;

  if($sht(cps=>$si) > 3){
    xlog("$si exceeded the CPS of 3 ($sht(cps=>$si))\n");
    sl_send_reply("403", "Forbidden CPS exceeded");
    exit;
  }

  // debug print the whole table
  sht_print();

  // iterate over the table
  sht_iterator_start("i1", "cps");
  while(sht_iterator_next("i1")) {
      xlog("cps[$shtitkey(i1)] is: $shtitval(i1)\n");
  }
  sht_iterator_end("i1");

  xlog("CPS[$si] increased to $sht(cps=>$si)\n\n");
  sl_send_reply("200", "Ok Sir");

}

event_route[htable:expired:cps] {
  xlog("cps record expired $shtrecord(key) => $shtrecord(value)\n");
}

event_route[htable:mod-init] {
    route(HTATBLE_INIT);
}

route[HTATBLE_INIT] {

    # curl "https://wizard-world-api.herokuapp.com/Spells" | jq
    #$var(uri)="/Spells";
    #$var(uri)="/connections/fqdn-authentication?microsoft_teams_sbc=true";
    $var(uri)="/api/v1/companies?_quantity=500";


    # connect to the endpoint and get all domains and tokens into the htable
    $var(http_status) = http_connect("fqdn", "$var(uri)", "$var(httpresult)");

    # now check the HTTP result
    if ($var(http_status) == 200) {
        xlog("L_WARN", " HTTP Response successful\n");

        jansson_array_size("data", $var(httpresult), "$var(size)");
        xlog("L_WARN", "Size of the JSON: $var(size)\n");

        # now parse the information and add the domains and tokens to the htables
        # This variable will count up to the size of the JSON data.
        $var(count) = 0;
        # PROXY-856 - This variable will count the real number of domains/tokens added to the htables.
        # It's required because many of the downloaded Connections are not real live active Connections.
        $var(count2) = 0;
        while($var(count) < $var(size)) {
            xlog("L_WARN", "checking $var(count)\n");

            #if (jansson_get("[$var(count)].fqdns[0].fqdn", $var(httpresult), "$var(domain)")) {
            if (jansson_get("data[$var(count)].addresses[0].city", $var(httpresult), "$var(city)")) {

            #if (jansson_get("[$var(count)].name", $var(httpresult), "$var(domain)")) {

                # get the sip region and the token (we already have the domain)
                #jansson_get("[$var(count)].name", $var(httpresult), "$var(name)");
                #jansson_get("[$var(count)].effect", $var(httpresult), "$var(effect)");
                jansson_get("data[$var(count)].name", $var(httpresult), "$var(name)");
                jansson_get("data[$var(count)].country", $var(httpresult), "$var(country)");

                # now shove the information into the hash table
                $var(count2) = $var(count2) + 1;
                xlog("L_WARN", "[] Adding domain $var(city) to htables... ($var(count2))\n");
                $sht(cps=>$var(domain)) = $var(token);

            }

            $var(count) = $var(count) + 1;
        }

        return 1;

    } else {
        xlog("L_WARN", "[] ERROR: Download of domains/tokens htable was unsuccessful!\n");
        # PROXY-304 - Report on how many domains/tokens were downloaded.
        return -1;
    }
}

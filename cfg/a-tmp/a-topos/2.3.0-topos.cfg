#!KAMAILIO

#!define DBURL "postgres://postgres:passw0rd@10.0.0.1:5432/kamailio"
# List of subnets (in a format for use by ipops module) to have TOPOS applied
#!define SUBNET "10.0.0.2" 

auto_aliases=no
// alias="sbc.domain.com"
listen=10.0.0.1 // use 192.0.2.0/24	?


loadmodule "tm"
loadmodule "xlog"
loadmodule "pv"
loadmodule "sl"
loadmodule "rr"
loadmodule "db_postgres"
loadmodule "topos"

// tmp
modparam("tm", "fr_timer", 10000)


# - set lockset to 8 (because we'll have just under 2^8 workers connecting)
modparam("db_postgres", "lockset", 8)

// modparam("topos", "version_table", 0) // don't use version table available in devel
modparam("topos", "storage", "db") // use a database
modparam("topos", "mask_callid", 0)  // don't replace the call-id
# topos module can bind to sanity module in order to perform sanity checks over received SIP request
modparam("topos", "sanity_checks", 0)
# Interval in seconds after which the branch records are deleted
modparam("topos", "branch_expire", 300) 
modparam("topos", "dialog_expire", 43500) // seconds to delete the dialog records
modparam("topos", "clean_interval", 300) // seconds to clean up of stored records
modparam("topos", "db_url", DBURL) // Database URL

modparam("topos", "contact_host", "sbc.domain.com")
// modparam("topos", "contact_mode", 0)
// modparam("topos", "context", "sbc")

request_route {
    // $var(name) = "Hello, World!";
    record_route();

    // xlog("$$var(name): $var(name)\n");
    // tps_set_context("sbc");
    // rewritehost("bob.domain.com");
    // forward("10.0.0.2", 5841);
    //tmp
    t_on_failure("MS_FAILURE");
    t_relay_to_udp("10.0.0.2", "5501");

}


event_route[topos:msg-sending] {
    // may need ipops?
    /* if ( is_in_subnet($snd(ip),              SUBNET)
      || is_in_subnet($sel(via[2].host),     SUBNET)
      || is_in_subnet($sel(via[2].received), SUBNET) )
      */
    if($sndto(ip)==SUBNET) {
        xlog("L_ERR", "[$ci $hdr(CSeq)] message getting topology hidden\n");
    }
    else { #  if (is_request())
        // If 'drop' is executed in event route, module skips topology hiding
        drop;
    }
}

failure_route[MS_FAILURE] {
    # routing has failed; find a failover and route again
    xlog("L_NOTICE", "[$ci][$csb] MS_FAILURE ROUTE BEING PROCESSED ($rs)\n");

    if (t_is_canceled()) {
        xlog("L_NOTICE", "[$ci][$csb] MS_FAILURE no action being taken (transaction canceled)\n");
        exit;
    }

    # if the branch timed out or got a 500 response, then we want to fail over to the next destination
    # else we end the transaction
    if ( t_branch_timeout() || t_check_status("(500)|(503)|(408)") ) {

            xlog("L_ERR", "[$ci][$csb] MS_FAILURE F!!!!\n");

    }
    exit;
}
